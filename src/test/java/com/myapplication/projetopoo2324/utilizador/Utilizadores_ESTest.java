/*
 * This file was automatically generated by EvoSuite
 * Thu May 02 15:22:19 GMT 2024
 */

package com.myapplication.projetopoo2324.utilizador;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.myapplication.projetopoo2324.atividade.Atividade;
import com.myapplication.projetopoo2324.planodetreino.PlanoDeTreino;
import com.myapplication.projetopoo2324.utilizador.TipoUtilizador;
import com.myapplication.projetopoo2324.utilizador.Utilizador;
import com.myapplication.projetopoo2324.utilizador.Utilizadores;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizadores_ESTest extends Utilizadores_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("V", "5zs[#=rx04aYk=B;L", "", 1L, tipoUtilizador0);
      utilizadores0.addUtilizador(utilizador0);
      int int0 = utilizadores0.sizeUtilizadores();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Utilizadores utilizadores0 = new Utilizadores(hashMap0);
      Utilizador utilizador0 = new Utilizador();
      utilizadores0.addUtilizador(utilizador0);
      Map<String, Utilizador> map0 = utilizadores0.getUtilizadores();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Utilizadores utilizadores0 = new Utilizadores(hashMap0);
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("com.myapplication.projetopoo2324.utilizador.Utilizadores", "", "", 0.0, tipoUtilizador0);
      utilizadores0.addUtilizador(utilizador0);
      Utilizador utilizador1 = utilizadores0.getUtilizadorByEmail("");
      assertEquals(0.0, utilizador1.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      LinkedList<PlanoDeTreino> linkedList0 = new LinkedList<PlanoDeTreino>();
      Utilizador utilizador0 = new Utilizador("V", "5zs[#=rx04aYk=B;L", "", 1L, tipoUtilizador0);
      List<Atividade> list0 = utilizador0.getAtividadesIsoladas();
      Utilizador utilizador1 = new Utilizador("V", "V", "V", (-1L), tipoUtilizador0, linkedList0, list0);
      utilizadores0.addUtilizador(utilizador1);
      Utilizador utilizador2 = utilizadores0.getUtilizadorByEmail("V");
      assertEquals(TipoUtilizador.AMADOR, utilizador2.getTipo());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Utilizadores utilizadores0 = new Utilizadores(hashMap0);
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador((String) null, "uCkz/Gq7}~8LG#K.Z}V", "4<_ks", (-149.36064918199588), tipoUtilizador0);
      utilizadores0.addUtilizador(utilizador0);
      String string0 = utilizadores0.getUserNameByKey("4<_ks");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNome("Utilizador{codigo=");
      utilizadores0.addUtilizador(utilizador0);
      String string0 = utilizadores0.getUserNameByKey("");
      assertEquals("Utilizador{codigo=", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      hashMap0.put("com.myapplication.projetopoo2324.utilizador.Utilizadores", (Utilizador) null);
      // Undeclared exception!
      try { 
        utilizadores0.setUtilizadores(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.utilizador.Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Utilizadores utilizadores0 = new Utilizadores(hashMap0);
      // Undeclared exception!
      try { 
        utilizadores0.removeUtilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.utilizador.Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      // Undeclared exception!
      try { 
        utilizadores0.addUtilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.utilizador.Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      hashMap0.put("+ME&g@! |vZa", (Utilizador) null);
      Utilizadores utilizadores0 = null;
      try {
        utilizadores0 = new Utilizadores(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.utilizador.Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Utilizadores utilizadores0 = new Utilizadores(hashMap0);
      boolean boolean0 = utilizadores0.existeEmail("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Utilizadores utilizadores0 = new Utilizadores(hashMap0);
      Utilizador utilizador0 = new Utilizador();
      hashMap0.put("Atividade realizada registrada com sucesso no plano de treino!", utilizador0);
      utilizadores0.setUtilizadores(hashMap0);
      boolean boolean0 = utilizadores0.existeEmail("Atividade realizada registrada com sucesso no plano de treino!");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Utilizadores utilizadores0 = new Utilizadores(hashMap0);
      Utilizador utilizador0 = utilizadores0.getUtilizadorByEmail("DZ<8tKeqeM8k$ZZ_:");
      assertNull(utilizador0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Utilizadores utilizadores0 = new Utilizadores(hashMap0);
      Utilizador utilizador0 = new Utilizador();
      utilizadores0.addUtilizador(utilizador0);
      Utilizador utilizador1 = utilizadores0.getUtilizadorByEmail("");
      assertEquals(60.0, utilizador1.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Utilizador utilizador0 = new Utilizador();
      utilizadores0.addUtilizador(utilizador0);
      utilizadores0.removeUtilizador(utilizador0);
      assertEquals(0, utilizadores0.sizeUtilizadores());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Utilizadores utilizadores0 = new Utilizadores(hashMap0);
      Utilizador utilizador0 = new Utilizador();
      utilizadores0.removeUtilizador(utilizador0);
      assertEquals("", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Utilizador utilizador0 = new Utilizador();
      utilizadores0.addUtilizador(utilizador0);
      utilizadores0.addUtilizador(utilizador0);
      assertNull(utilizador0.getTipo());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Utilizador utilizador0 = new Utilizador();
      utilizadores0.addUtilizador(utilizador0);
      String string0 = utilizadores0.getUserNameByKey("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Utilizador utilizador0 = new Utilizador();
      utilizadores0.addUtilizador(utilizador0);
      utilizadores0.clone();
      assertEquals(1, utilizadores0.sizeUtilizadores());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Utilizadores utilizadores1 = utilizadores0.clone();
      assertEquals(0, utilizadores1.sizeUtilizadores());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      // Undeclared exception!
      try { 
        utilizadores0.getUserNameByKey("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.utilizador.Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      int int0 = utilizadores0.sizeUtilizadores();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Map<String, Utilizador> map0 = utilizadores0.getUtilizadores();
      Utilizadores utilizadores1 = new Utilizadores(map0);
      assertEquals(0, utilizadores1.sizeUtilizadores());
  }
}
