/*
 * This file was automatically generated by EvoSuite
 * Thu May 02 15:15:47 GMT 2024
 */

package com.myapplication.projetopoo2324.utilizador;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.myapplication.projetopoo2324.atividade.Atividade;
import com.myapplication.projetopoo2324.atividade.TipoAtividade;
import com.myapplication.projetopoo2324.atividade.tiposdeatividade.distancia.Distancia;
import com.myapplication.projetopoo2324.atividade.tiposdeatividade.distanciaaltimetria.DistanciaAltimetria;
import com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoespeso.RepeticoesPeso;
import com.myapplication.projetopoo2324.planodetreino.PlanoDeTreino;
import com.myapplication.projetopoo2324.planodetreino.diadasemana.DiaDaSemana;
import com.myapplication.projetopoo2324.planodetreino.recorrencia.Recorrencia;
import com.myapplication.projetopoo2324.utilizador.TipoUtilizador;
import com.myapplication.projetopoo2324.utilizador.Utilizador;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.EnumSet;
import java.util.LinkedList;
import java.util.List;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("e!P-NNy3*jQ?rW", "e!P-NNy3*jQ?rW", "e!P-NNy3*jQ?rW", 0.8, tipoUtilizador0);
      Utilizador utilizador1 = utilizador0.clone();
      utilizador1.setFCM(2208.873);
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertEquals(2208.873, utilizador1.getFCM(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getTipo();
      assertEquals(60.0, utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("O usu\u00E1rio n\u00E3o possui um plano de treino definido.", "", "TERCA", 3041.5740749, tipoUtilizador0, (List<PlanoDeTreino>) null, (List<Atividade>) null);
      utilizador0.getPlanosDeTreino();
      assertEquals("TERCA", utilizador0.getEmail());
      assertEquals("O usu\u00E1rio n\u00E3o possui um plano de treino definido.", utilizador0.getNome());
      assertEquals("", utilizador0.getMorada());
      assertEquals(3041.5740749, utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      LinkedList<PlanoDeTreino> linkedList0 = new LinkedList<PlanoDeTreino>();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Recorrencia recorrencia0 = Recorrencia.UNICA_VEZ;
      DiaDaSemana diaDaSemana0 = DiaDaSemana.SEXTA;
      EnumSet<DiaDaSemana> enumSet0 = EnumSet.of(diaDaSemana0, diaDaSemana0, diaDaSemana0, diaDaSemana0, diaDaSemana0);
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, (List<Atividade>) null, "A atividade n\u00E3o est\u00E1 inclu\u00EDda no plano de treino especificado.", recorrencia0, enumSet0);
      List<Atividade> list0 = planoDeTreino0.getAtividades();
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, "", 1.0, tipoUtilizador0, linkedList0, list0);
      String string0 = utilizador0.getNome();
      assertEquals(1.0, utilizador0.getFCM(), 0.01);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getNome();
      assertEquals(60.0, utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setMorada((String) null);
      utilizador0.getMorada();
      assertEquals(60.0, utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("NQlcvkY]HW/", "Le8hv<2bk#fa>", "NQlcvkY]HW/", 1055.66229, tipoUtilizador0);
      String string0 = utilizador0.getMorada();
      assertEquals("NQlcvkY]HW/", utilizador0.getEmail());
      assertEquals("Le8hv<2bk#fa>", string0);
      assertEquals(1055.66229, utilizador0.getFCM(), 0.01);
      assertEquals("NQlcvkY]HW/", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("C", "com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoes.Repeticoes", "", 0.0, tipoUtilizador0);
      double double0 = utilizador0.getFCM();
      assertEquals(0.0, double0, 0.01);
      assertEquals("C", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals("com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoes.Repeticoes", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      double double0 = utilizador0.getFCM();
      assertEquals(60.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("i5EFPk6vxHK", (String) null, (String) null, 0.0, tipoUtilizador0);
      String string0 = utilizador0.getEmail();
      assertNull(string0);
      assertEquals(0.0, utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("", "", "", (-5757.608686175), tipoUtilizador0);
      utilizador0.getEmail();
      assertEquals((-5757.608686175), utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("", "", "", (-5757.608686175), tipoUtilizador0);
      utilizador0.setCodigo((UUID) null);
      utilizador0.getCodigo();
      assertEquals((-5757.608686175), utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Random.setNextRandom(1011);
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getCodigo();
      assertEquals(60.0, utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("", "", "", 282.9264523075725, tipoUtilizador0);
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.getAtividadesIsoladas();
      assertEquals(282.9264523075725, utilizador0.getFCM(), 0.01);
      assertTrue(utilizador1.equals((Object)utilizador0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA;
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2991);
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Distancia distancia0 = new Distancia("tK:t$[RsCL[4@8K", tipoAtividade0, 1070.796, 39, 0.0, 0.0, localDateTime0);
      utilizador0.registrarAtividadeIsolada(distancia0);
      utilizador0.getAtividadesIsoladas();
      assertEquals(60.0, utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("VrVUuI+K7`+svROues", "VrVUuI+K7`+svROues", "UNICA_VEZ", (-620.3609), tipoUtilizador0);
      // Undeclared exception!
      try { 
        utilizador0.setAtividadesIsoladas((List<Atividade>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("fkP@:RY2)i#V%H&M", "fkP@:RY2)i#V%H&M", "fkP@:RY2)i#V%H&M", 0.5, tipoUtilizador0);
      Utilizador utilizador1 = new Utilizador(utilizador0);
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      DistanciaAltimetria distanciaAltimetria0 = new DistanciaAltimetria("fkP@:RY2)i#V%H&M", tipoAtividade0, 0.2, (-1899), 0.0, (-1899), (LocalDateTime) null);
      // Undeclared exception!
      try { 
        utilizador1.registrarAtividadeIsolada(distanciaAltimetria0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.utilizador.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("", "cY", "gZDHZ*OsY", 260.13, tipoUtilizador0);
      LocalDate localDate0 = MockLocalDate.now();
      Recorrencia recorrencia0 = Recorrencia.DIARIA;
      DiaDaSemana diaDaSemana0 = DiaDaSemana.DOMINGO;
      EnumSet<DiaDaSemana> enumSet0 = EnumSet.of(diaDaSemana0, diaDaSemana0, diaDaSemana0);
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, (List<Atividade>) null, "gZDHZ*OsY", recorrencia0, enumSet0);
      planoDeTreino0.setAtividades((List<Atividade>) null);
      // Undeclared exception!
      try { 
        utilizador0.registrarAtividadeDoPlano((Atividade) null, planoDeTreino0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("C", "com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoes.Repeticoes", "", 0.0, tipoUtilizador0);
      Recorrencia recorrencia0 = Recorrencia.UNICA_VEZ;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino((LocalDate) null, (List<Atividade>) null, "OrL4Vas4=K9|t", recorrencia0, (EnumSet<DiaDaSemana>) null);
      planoDeTreino0.setAtividades((List<Atividade>) null);
      // Undeclared exception!
      try { 
        utilizador0.executarPlano(planoDeTreino0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.utilizador.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("", "", "", (-5757.608686175), tipoUtilizador0);
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador0.setCodigo((UUID) null);
      // Undeclared exception!
      try { 
        utilizador0.equals(utilizador1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.utilizador.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("* ", "* ", "* ", 0.0, tipoUtilizador0);
      List<Atividade> list0 = utilizador0.getAtividadesIsoladas();
      Utilizador utilizador1 = new Utilizador("* ", "* ", "* ", 0.0, tipoUtilizador0, (List<PlanoDeTreino>) null, list0);
      // Undeclared exception!
      try { 
        utilizador1.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.calcularFatorMultiplicativo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.utilizador.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      Utilizador utilizador0 = new Utilizador("x4A~", "R+{", ", Tempo Gasto='", 320.10723, tipoUtilizador0, (List<PlanoDeTreino>) null, linkedList0);
      Utilizador utilizador1 = null;
      try {
        utilizador1 = new Utilizador(utilizador0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("C", "com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoes.Repeticoes", "", 0.0, tipoUtilizador0);
      Recorrencia recorrencia0 = Recorrencia.UNICA_VEZ;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino((LocalDate) null, (List<Atividade>) null, "OrL4Vas4=K9|t", recorrencia0, (EnumSet<DiaDaSemana>) null);
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      planoDeTreino0.adicionarAtividade(repeticoesPeso0, recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.registrarAtividadeRealizada(repeticoesPeso0, planoDeTreino0);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getFCM(), 0.01);
      assertEquals("com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoes.Repeticoes", utilizador0.getMorada());
      assertEquals("C", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("C", "com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoes.Repeticoes", "", 0.0, tipoUtilizador0);
      Recorrencia recorrencia0 = Recorrencia.UNICA_VEZ;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino((LocalDate) null, (List<Atividade>) null, "OrL4Vas4=K9|t", recorrencia0, (EnumSet<DiaDaSemana>) null);
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      planoDeTreino0.adicionarAtividade(repeticoesPeso0, recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.registrarAtividadeDoPlano(repeticoesPeso0, planoDeTreino0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoes.Repeticoes", utilizador0.getMorada());
      assertEquals("C", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("C", "com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoes.Repeticoes", "", 0.0, tipoUtilizador0);
      Recorrencia recorrencia0 = Recorrencia.UNICA_VEZ;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino((LocalDate) null, (List<Atividade>) null, "OrL4Vas4=K9|t", recorrencia0, (EnumSet<DiaDaSemana>) null);
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      utilizador0.registrarAtividadeDoPlano(repeticoesPeso0, planoDeTreino0);
      assertEquals("com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoes.Repeticoes", utilizador0.getMorada());
      assertEquals("C", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("", "", "", (-5757.608686175), tipoUtilizador0);
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Distancia distancia0 = new Distancia("", tipoAtividade0, (-5757.608686175), (-617), (-617), (-617), localDateTime0);
      utilizador0.registrarAtividadeDoPlano(distancia0, (PlanoDeTreino) null);
      assertEquals((-5757.608686175), utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, (-1622.8544992), tipoUtilizador0);
      TipoUtilizador tipoUtilizador1 = TipoUtilizador.PRATICANTE_OCASIONAL;
      utilizador0.setTipo(tipoUtilizador1);
      double double0 = utilizador0.calcularFatorMultiplicativo();
      assertEquals((-1622.8544992), utilizador0.getFCM(), 0.01);
      assertEquals(0.8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("", "", "", (-5757.608686175), tipoUtilizador0);
      double double0 = utilizador0.calcularFatorMultiplicativo();
      assertEquals((-5757.608686175), utilizador0.getFCM(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("/", "/", "/", (-623.878057), tipoUtilizador0);
      double double0 = utilizador0.calcularFatorMultiplicativo();
      assertEquals(1.2, double0, 0.01);
      assertEquals((-623.878057), utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("", "", "", (-5757.608686175), tipoUtilizador0);
      utilizador0.executarPlano((PlanoDeTreino) null);
      assertEquals((-5757.608686175), utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("C", "com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoes.Repeticoes", "", 0.0, tipoUtilizador0);
      Recorrencia recorrencia0 = Recorrencia.UNICA_VEZ;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino((LocalDate) null, (List<Atividade>) null, "OrL4Vas4=K9|t", recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.registrarAtividadeRealizada((Atividade) null, planoDeTreino0);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getFCM(), 0.01);
      assertEquals("C", utilizador0.getNome());
      assertEquals("com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoes.Repeticoes", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("C", "com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoes.Repeticoes", "", 0.0, tipoUtilizador0);
      Recorrencia recorrencia0 = Recorrencia.UNICA_VEZ;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino((LocalDate) null, (List<Atividade>) null, "OrL4Vas4=K9|t", recorrencia0, (EnumSet<DiaDaSemana>) null);
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      planoDeTreino0.adicionarAtividade(repeticoesPeso0, recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.executarPlano(planoDeTreino0);
      assertEquals("com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoes.Repeticoes", utilizador0.getMorada());
      assertEquals("C", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("", "", "", (-5757.608686175), tipoUtilizador0);
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Distancia distancia0 = new Distancia("", tipoAtividade0, (-5757.608686175), (-617), (-617), (-617), localDateTime0);
      utilizador0.registrarAtividadeRealizada(distancia0, (PlanoDeTreino) null);
      assertEquals((-5757.608686175), utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("", "", "", (-5757.608686175), tipoUtilizador0);
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      utilizador1.adicionarPlanoDeTreino((PlanoDeTreino) null);
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      utilizador1.setTipo(tipoUtilizador0);
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertEquals(60.0, utilizador1.getFCM(), 0.01);
      
      utilizador1.setFCM(0.0);
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("/", "/", "/", (-623.878057), tipoUtilizador0);
      Utilizador utilizador1 = utilizador0.clone();
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      utilizador1.setEmail("*[5Hbil<{Mvf%");
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, (-1622.8544992), tipoUtilizador0);
      Utilizador utilizador1 = utilizador0.clone();
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      utilizador0.setMorada("");
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("/", "/", "/", (-623.878057), tipoUtilizador0);
      Utilizador utilizador1 = new Utilizador();
      UUID uUID0 = utilizador0.getCodigo();
      utilizador1.setCodigo(uUID0);
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertFalse(boolean0);
      assertEquals(60.0, utilizador1.getFCM(), 0.01);
      assertEquals((-623.878057), utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("C", "com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoes.Repeticoes", "", 0.0, tipoUtilizador0);
      Utilizador utilizador1 = utilizador0.clone();
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      UUID uUID0 = MockUUID.randomUUID();
      utilizador0.setCodigo(uUID0);
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, (-1622.8544992), tipoUtilizador0);
      Utilizador utilizador1 = utilizador0.clone();
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertTrue(boolean0);
      assertEquals((-1622.8544992), utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(60.0, utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("", "", "", (-5757.608686175), tipoUtilizador0);
      boolean boolean0 = utilizador0.equals(utilizador0);
      assertTrue(boolean0);
      assertEquals((-5757.608686175), utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, (-1622.8544992), tipoUtilizador0);
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      boolean boolean0 = utilizador0.equals(repeticoesPeso0);
      assertFalse(boolean0);
      assertEquals((-1622.8544992), utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("/", "/", "/", (-623.878057), tipoUtilizador0);
      utilizador0.getEmail();
      assertEquals((-623.878057), utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, (-1622.8544992), tipoUtilizador0);
      double double0 = utilizador0.getFCM();
      assertEquals((-1622.8544992), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, (-1622.8544992), tipoUtilizador0);
      utilizador0.setNome("Atividade realizada registrada com sucesso!");
      assertEquals((-1622.8544992), utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("", "", "", (-5757.608686175), tipoUtilizador0);
      utilizador0.removerPlanoDeTreino((PlanoDeTreino) null);
      assertEquals((-5757.608686175), utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador();
      List<PlanoDeTreino> list0 = utilizador0.getPlanosDeTreino();
      Utilizador utilizador1 = new Utilizador("", "", "", 196.143, tipoUtilizador0, list0, (List<Atividade>) null);
      assertEquals(60.0, utilizador0.getFCM(), 0.01);
      assertEquals(196.143, utilizador1.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, (-1622.8544992), tipoUtilizador0);
      String string0 = utilizador0.toString();
      assertEquals("Utilizador{codigo=00000000-0100-4000-8200-000003000000, nome='null', morada='null', email='null', fcm=-1622.8544992, tipo=PROFISSIONAL, planosDeTreino=[]}", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, (-1622.8544992), tipoUtilizador0);
      List<Atividade> list0 = utilizador0.getAtividadesIsoladas();
      utilizador0.setAtividadesIsoladas(list0);
      assertEquals((-1622.8544992), utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("fkP@:RY2)i#V%H&M", "fkP@:RY2)i#V%H&M", "fkP@:RY2)i#V%H&M", 0.5, tipoUtilizador0);
      utilizador0.getNome();
      assertEquals(0.5, utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("C", "com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoes.Repeticoes", "", 0.0, tipoUtilizador0);
      utilizador0.getTipo();
      assertEquals("com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoes.Repeticoes", utilizador0.getMorada());
      assertEquals(0.0, utilizador0.getFCM(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("C", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("", "", "", (-5757.608686175), tipoUtilizador0);
      utilizador0.adicionarPlanoDeTreino((PlanoDeTreino) null);
      utilizador0.getPlanosDeTreino();
      assertEquals((-5757.608686175), utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("fkP@:RY2)i#V%H&M", "fkP@:RY2)i#V%H&M", "fkP@:RY2)i#V%H&M", 0.5, tipoUtilizador0);
      utilizador0.hashCode();
      assertEquals(0.5, utilizador0.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getMorada();
      assertEquals(60.0, utilizador0.getFCM(), 0.01);
  }
}
