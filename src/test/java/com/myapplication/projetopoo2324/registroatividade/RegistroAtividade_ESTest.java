/*
 * This file was automatically generated by EvoSuite
 * Thu May 02 15:26:25 GMT 2024
 */

package com.myapplication.projetopoo2324.registroatividade;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.myapplication.projetopoo2324.atividade.Atividade;
import com.myapplication.projetopoo2324.atividade.TipoAtividade;
import com.myapplication.projetopoo2324.atividade.tiposdeatividade.distancia.Distancia;
import com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoespeso.RepeticoesPeso;
import com.myapplication.projetopoo2324.registroatividade.RegistroAtividade;
import com.myapplication.projetopoo2324.utilizador.TipoUtilizador;
import com.myapplication.projetopoo2324.utilizador.Utilizador;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockOffsetDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegistroAtividade_ESTest extends RegistroAtividade_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset0);
      RegistroAtividade registroAtividade0 = new RegistroAtividade((Utilizador) null, repeticoesPeso0, localDateTime0);
      Utilizador utilizador0 = registroAtividade0.getUtilizador();
      assertNull(utilizador0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("", "", "=VshAz^HvIIS\"s_", 0.0, tipoUtilizador0);
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours((-1));
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      RegistroAtividade registroAtividade0 = new RegistroAtividade(utilizador0, repeticoesPeso0, localDateTime0);
      Utilizador utilizador1 = registroAtividade0.getUtilizador();
      assertSame(utilizador1, utilizador0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("/X{E", "Y", "M!':s5_CTB^Yejr(", (-1642.390104788704), tipoUtilizador0);
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      RegistroAtividade registroAtividade0 = new RegistroAtividade(utilizador0, repeticoesPeso0, (LocalDateTime) null);
      Utilizador utilizador1 = registroAtividade0.getUtilizador();
      assertEquals(TipoUtilizador.PRATICANTE_OCASIONAL, utilizador1.getTipo());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("/X{E", "Y", "M!':s5_CTB^Yejr(", (-1642.390104788704), tipoUtilizador0);
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      RegistroAtividade registroAtividade0 = new RegistroAtividade(utilizador0, repeticoesPeso0, (LocalDateTime) null);
      LocalDateTime localDateTime0 = registroAtividade0.getDataHora();
      assertNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      RegistroAtividade registroAtividade0 = new RegistroAtividade(utilizador0, (Atividade) null, localDateTime0);
      Atividade atividade0 = registroAtividade0.getAtividade();
      assertNull(atividade0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      Distancia distancia0 = new Distancia("", tipoAtividade0, 1521.024839952, (-388), 1521.024839952, (LocalDateTime) null, true);
      RegistroAtividade registroAtividade0 = new RegistroAtividade((Utilizador) null, distancia0, (LocalDateTime) null);
      Atividade atividade0 = registroAtividade0.getAtividade();
      assertEquals(0, atividade0.getIteracoes());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1, 1, 1, 0, 3);
      RegistroAtividade registroAtividade0 = new RegistroAtividade(utilizador0, repeticoesPeso0, localDateTime0);
      repeticoesPeso0.setIteracoes(3);
      RepeticoesPeso repeticoesPeso1 = (RepeticoesPeso)registroAtividade0.getAtividade();
      assertEquals(0.0, repeticoesPeso1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES;
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.from(offsetDateTime0);
      Distancia distancia0 = new Distancia((String) null, tipoAtividade0, (-3239.11545861625), (-1), (-3239.11545861625), localDateTime0, false);
      RegistroAtividade registroAtividade0 = new RegistroAtividade(utilizador0, distancia0, localDateTime0);
      distancia0.setIteracoes((-1));
      Atividade atividade0 = registroAtividade0.getAtividade();
      assertSame(atividade0, distancia0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1, 1, 1, 0, 3);
      RegistroAtividade registroAtividade0 = new RegistroAtividade(utilizador0, repeticoesPeso0, localDateTime0);
      Utilizador utilizador1 = registroAtividade0.getUtilizador();
      assertNull(utilizador1.getTipo());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1, 1, 1, 0, 3);
      RegistroAtividade registroAtividade0 = new RegistroAtividade(utilizador0, repeticoesPeso0, localDateTime0);
      LocalDateTime localDateTime1 = registroAtividade0.getDataHora();
      assertSame(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      RegistroAtividade registroAtividade0 = new RegistroAtividade(utilizador0, (Atividade) null, localDateTime0);
      RegistroAtividade registroAtividade1 = new RegistroAtividade(registroAtividade0);
      assertFalse(registroAtividade1.equals((Object)registroAtividade0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegistroAtividade registroAtividade0 = null;
      try {
        registroAtividade0 = new RegistroAtividade((RegistroAtividade) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.registroatividade.RegistroAtividade", e);
      }
  }
}
