/*
 * This file was automatically generated by EvoSuite
 * Thu May 02 15:23:10 GMT 2024
 */

package com.myapplication.projetopoo2324.planodetreino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.myapplication.projetopoo2324.atividade.Atividade;
import com.myapplication.projetopoo2324.atividade.TipoAtividade;
import com.myapplication.projetopoo2324.atividade.tiposdeatividade.distanciaaltimetria.DistanciaAltimetria;
import com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoespeso.RepeticoesPeso;
import com.myapplication.projetopoo2324.planodetreino.PlanoDeTreino;
import com.myapplication.projetopoo2324.planodetreino.diadasemana.DiaDaSemana;
import com.myapplication.projetopoo2324.planodetreino.recorrencia.Recorrencia;
import com.myapplication.projetopoo2324.utilizador.TipoUtilizador;
import com.myapplication.projetopoo2324.utilizador.Utilizador;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Period;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.EnumSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlanoDeTreino_ESTest extends PlanoDeTreino_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      DiaDaSemana diaDaSemana0 = DiaDaSemana.TERCA;
      EnumSet<DiaDaSemana> enumSet0 = EnumSet.of(diaDaSemana0, diaDaSemana0, diaDaSemana0, diaDaSemana0, diaDaSemana0);
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, "", recorrencia0, enumSet0);
      planoDeTreino0.removerDiaDaSemana(diaDaSemana0);
      assertFalse(enumSet0.contains(diaDaSemana0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      Recorrencia recorrencia0 = Recorrencia.DIARIA;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(543L);
      DiaDaSemana diaDaSemana0 = DiaDaSemana.QUARTA;
      EnumSet<DiaDaSemana> enumSet0 = EnumSet.of(diaDaSemana0);
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, (String) null, recorrencia0, enumSet0);
      planoDeTreino0.adicionarDiaDaSemana(diaDaSemana0);
      assertEquals(Recorrencia.DIARIA, planoDeTreino0.getRecorrencia());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("=W ", "PRATICANTE_OCASIONAL", "=W ", 842.4882885180546, tipoUtilizador0);
      List<Atividade> list0 = utilizador0.getAtividadesIsoladas();
      Recorrencia recorrencia0 = Recorrencia.DIARIA;
      Class<DiaDaSemana> class0 = DiaDaSemana.class;
      EnumSet<DiaDaSemana> enumSet0 = EnumSet.allOf(class0);
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, list0, "=W ", recorrencia0, enumSet0);
      planoDeTreino0.setRecorrencia((Recorrencia) null);
      planoDeTreino0.getRecorrencia();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      Class<DiaDaSemana> class0 = DiaDaSemana.class;
      EnumSet<DiaDaSemana> enumSet0 = EnumSet.noneOf(class0);
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, "d:X", recorrencia0, enumSet0);
      String string0 = planoDeTreino0.getEmailUtilizador();
      assertEquals("d:X", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      DiaDaSemana diaDaSemana0 = DiaDaSemana.TERCA;
      EnumSet<DiaDaSemana> enumSet0 = EnumSet.of(diaDaSemana0, diaDaSemana0, diaDaSemana0, diaDaSemana0);
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, (List<Atividade>) null, "", recorrencia0, enumSet0);
      String string0 = planoDeTreino0.getEmailUtilizador();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      Recorrencia recorrencia0 = Recorrencia.UNICA_VEZ;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino((LocalDate) null, linkedList0, "", recorrencia0, (EnumSet<DiaDaSemana>) null);
      EnumSet<DiaDaSemana> enumSet0 = planoDeTreino0.getDiasDaSemana();
      assertNull(enumSet0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Period period0 = Period.ofDays((-1703));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, "", recorrencia0, (EnumSet<DiaDaSemana>) null);
      EnumSet<DiaDaSemana> enumSet0 = planoDeTreino0.getDiaDaSemana();
      assertNull(enumSet0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino((LocalDate) null, (List<Atividade>) null, "com.myapplication.projetopoo2324.planodetreino.PlanoDeTreino", recorrencia0, (EnumSet<DiaDaSemana>) null);
      LocalDate localDate0 = planoDeTreino0.getData();
      assertNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino((LocalDate) null, (List<Atividade>) null, "com.myapplication.projetopoo2324.planodstreino.PlanoDeTreino", recorrencia0, (EnumSet<DiaDaSemana>) null);
      planoDeTreino0.setAtividades((List<Atividade>) null);
      List<Atividade> list0 = planoDeTreino0.getAtividades();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      DiaDaSemana diaDaSemana0 = DiaDaSemana.TERCA;
      EnumSet<DiaDaSemana> enumSet0 = EnumSet.of(diaDaSemana0, diaDaSemana0, diaDaSemana0, diaDaSemana0);
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, (List<Atividade>) null, "", recorrencia0, enumSet0);
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      planoDeTreino0.adicionarAtividade(repeticoesPeso0, recorrencia0, enumSet0);
      List<Atividade> list0 = planoDeTreino0.getAtividades();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(1, 1, 1);
      Recorrencia recorrencia0 = Recorrencia.DIARIA;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, (List<Atividade>) null, "", recorrencia0, (EnumSet<DiaDaSemana>) null);
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES_COM_PESOS;
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(1, 1, zoneOffset0);
      DistanciaAltimetria distanciaAltimetria0 = new DistanciaAltimetria("", tipoAtividade0, 1, 1, (-685.93267411), 1, localDateTime0);
      planoDeTreino0.setAtividades((List<Atividade>) null);
      // Undeclared exception!
      try { 
        planoDeTreino0.removerAtividade(distanciaAltimetria0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.planodetreino.PlanoDeTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(1, 1, 1);
      Recorrencia recorrencia0 = Recorrencia.DIARIA;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, (List<Atividade>) null, "", recorrencia0, (EnumSet<DiaDaSemana>) null);
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES_COM_PESOS;
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(1, 1, zoneOffset0);
      DistanciaAltimetria distanciaAltimetria0 = new DistanciaAltimetria("", tipoAtividade0, 1, 1, (-685.93267411), 1, localDateTime0);
      planoDeTreino0.adicionarAtividade((Atividade) null, recorrencia0, (EnumSet<DiaDaSemana>) null);
      // Undeclared exception!
      try { 
        planoDeTreino0.definirIteracoes(distanciaAltimetria0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.planodetreino.PlanoDeTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(1, 1, 1);
      Recorrencia recorrencia0 = Recorrencia.DIARIA;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, (List<Atividade>) null, ";", recorrencia0, (EnumSet<DiaDaSemana>) null);
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES_COM_PESOS;
      planoDeTreino0.setAtividades((List<Atividade>) null);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(1, 1, zoneOffset0);
      DistanciaAltimetria distanciaAltimetria0 = new DistanciaAltimetria(";", tipoAtividade0, 1, 1, (-685.93267411), 1, localDateTime0);
      // Undeclared exception!
      try { 
        planoDeTreino0.adicionarAtividade(distanciaAltimetria0, recorrencia0, (EnumSet<DiaDaSemana>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.planodetreino.PlanoDeTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(1, 1, 1);
      Recorrencia recorrencia0 = Recorrencia.DIARIA;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, (List<Atividade>) null, "", recorrencia0, (EnumSet<DiaDaSemana>) null);
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES_COM_PESOS;
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(1, 1, zoneOffset0);
      DistanciaAltimetria distanciaAltimetria0 = new DistanciaAltimetria("", tipoAtividade0, 1, 1, (-685.93267411), 1, localDateTime0);
      planoDeTreino0.adicionarAtividade(distanciaAltimetria0, recorrencia0, (EnumSet<DiaDaSemana>) null);
      planoDeTreino0.definirIteracoes((Atividade) null, 2067);
      assertEquals(Recorrencia.DIARIA, planoDeTreino0.getRecorrencia());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      Recorrencia recorrencia0 = Recorrencia.DIARIA;
      Class<DiaDaSemana> class0 = DiaDaSemana.class;
      EnumSet<DiaDaSemana> enumSet0 = EnumSet.allOf(class0);
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, "fr@Dae(eo}f`OF", recorrencia0, enumSet0);
      planoDeTreino0.setData(localDate0);
      assertEquals(Recorrencia.DIARIA, planoDeTreino0.getRecorrencia());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      Recorrencia recorrencia0 = Recorrencia.DIARIA;
      Class<DiaDaSemana> class0 = DiaDaSemana.class;
      EnumSet<DiaDaSemana> enumSet0 = EnumSet.allOf(class0);
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, "fr@Dae(eo}f`OF", recorrencia0, enumSet0);
      LocalDate localDate1 = planoDeTreino0.getData();
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(1, 1, 1);
      Recorrencia recorrencia0 = Recorrencia.DIARIA;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, (List<Atividade>) null, "", recorrencia0, (EnumSet<DiaDaSemana>) null);
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES_COM_PESOS;
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(1, 1, zoneOffset0);
      DistanciaAltimetria distanciaAltimetria0 = new DistanciaAltimetria("", tipoAtividade0, 1, 1, (-685.93267411), 1, localDateTime0);
      planoDeTreino0.adicionarAtividade(distanciaAltimetria0, recorrencia0, (EnumSet<DiaDaSemana>) null);
      planoDeTreino0.definirIteracoes(distanciaAltimetria0, 2067);
      assertEquals(2067, distanciaAltimetria0.getIteracoes());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino((LocalDate) null, (List<Atividade>) null, "com.myapplication.projetopoo2324.planodetreino.PlanoDeTreino", recorrencia0, (EnumSet<DiaDaSemana>) null);
      List<Atividade> list0 = planoDeTreino0.getAtividades();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(1, 1, 1);
      Recorrencia recorrencia0 = Recorrencia.DIARIA;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, (List<Atividade>) null, "", recorrencia0, (EnumSet<DiaDaSemana>) null);
      planoDeTreino0.setDiaDaSemana((EnumSet<DiaDaSemana>) null);
      assertEquals("", planoDeTreino0.getEmailUtilizador());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(1, 1, 1);
      Recorrencia recorrencia0 = Recorrencia.DIARIA;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, (List<Atividade>) null, "", recorrencia0, (EnumSet<DiaDaSemana>) null);
      Recorrencia recorrencia1 = planoDeTreino0.getRecorrencia();
      assertSame(recorrencia1, recorrencia0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(1, 1, 1);
      Recorrencia recorrencia0 = Recorrencia.DIARIA;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, (List<Atividade>) null, "", recorrencia0, (EnumSet<DiaDaSemana>) null);
      DiaDaSemana diaDaSemana0 = DiaDaSemana.QUINTA;
      // Undeclared exception!
      try { 
        planoDeTreino0.adicionarDiaDaSemana(diaDaSemana0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.planodetreino.PlanoDeTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      Recorrencia recorrencia0 = Recorrencia.DIARIA;
      DiaDaSemana diaDaSemana0 = DiaDaSemana.SEGUNDA;
      EnumSet<DiaDaSemana> enumSet0 = EnumSet.of(diaDaSemana0);
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, (String) null, recorrencia0, enumSet0);
      String string0 = planoDeTreino0.getEmailUtilizador();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino((LocalDate) null, (List<Atividade>) null, "com.myapplication.projetopoo2324.planodetreino.PlanoDeTreino", recorrencia0, (EnumSet<DiaDaSemana>) null);
      DiaDaSemana diaDaSemana0 = DiaDaSemana.TERCA;
      // Undeclared exception!
      try { 
        planoDeTreino0.removerDiaDaSemana(diaDaSemana0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.planodetreino.PlanoDeTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(1, 1, 1);
      Recorrencia recorrencia0 = Recorrencia.DIARIA;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, (List<Atividade>) null, "", recorrencia0, (EnumSet<DiaDaSemana>) null);
      planoDeTreino0.setEmailUtilizador("");
      assertEquals(Recorrencia.DIARIA, planoDeTreino0.getRecorrencia());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Recorrencia recorrencia0 = Recorrencia.DIARIA;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, (List<Atividade>) null, "", recorrencia0, (EnumSet<DiaDaSemana>) null);
      planoDeTreino0.removerAtividade((Atividade) null);
      assertEquals(Recorrencia.DIARIA, planoDeTreino0.getRecorrencia());
  }
}
