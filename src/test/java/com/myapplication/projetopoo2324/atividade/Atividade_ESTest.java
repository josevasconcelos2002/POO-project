/*
 * This file was automatically generated by EvoSuite
 * Thu May 02 15:24:54 GMT 2024
 */

package com.myapplication.projetopoo2324.atividade;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.myapplication.projetopoo2324.atividade.TipoAtividade;
import com.myapplication.projetopoo2324.atividade.tiposdeatividade.distancia.Distancia;
import com.myapplication.projetopoo2324.atividade.tiposdeatividade.distanciaaltimetria.DistanciaAltimetria;
import com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoes.Repeticoes;
import com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoespeso.RepeticoesPeso;
import com.myapplication.projetopoo2324.utilizador.TipoUtilizador;
import com.myapplication.projetopoo2324.utilizador.Utilizador;
import java.time.Clock;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockOffsetDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Atividade_ESTest extends Atividade_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA;
      DistanciaAltimetria distanciaAltimetria0 = new DistanciaAltimetria("#5ZQcUTUn`Q?8_N", tipoAtividade0, 0.0, (-723), 2904.73358459723, (-723), (LocalDateTime) null);
      distanciaAltimetria0.setNome(", data=");
      assertEquals(0.0, distanciaAltimetria0.getTempoGasto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      repeticoesPeso0.setIteracoes((-3093));
      assertEquals(0.0, repeticoesPeso0.getTempoGasto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      repeticoesPeso0.getTipo();
      assertEquals(0.0, repeticoesPeso0.getTempoGasto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      double double0 = repeticoesPeso0.getTempoGasto();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Distancia distancia0 = new Distancia("[5ojQ~Z69Z+{J9O&", tipoAtividade0, (-1131.4729), 0, 0, (-1.0), localDateTime0);
      double double0 = distancia0.getTempoGasto();
      assertEquals((-1131.4729), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      repeticoesPeso0.getNome();
      assertEquals(0.0, repeticoesPeso0.getTempoGasto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES;
      Distancia distancia0 = new Distancia("N~FF2", tipoAtividade0, 2161.8293321801, 125, 2161.8293321801, 2161.8293321801, (LocalDateTime) null);
      distancia0.setNome("N~FF2");
      distancia0.getNome();
      assertEquals(2161.8293321801, distancia0.getTempoGasto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA;
      DistanciaAltimetria distanciaAltimetria0 = new DistanciaAltimetria("", tipoAtividade0, 60.0, 1205, 60.0, 694.59, (LocalDateTime) null);
      distanciaAltimetria0.setNome("");
      distanciaAltimetria0.getNome();
      assertEquals(60.0, distanciaAltimetria0.getTempoGasto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      repeticoesPeso0.getIteracoes();
      assertEquals(0.0, repeticoesPeso0.getTempoGasto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      DistanciaAltimetria distanciaAltimetria0 = new DistanciaAltimetria("w.ba\u0002sQa", tipoAtividade0, 1185.69895265, 0, (-37.4678273414293), (-1349.432), localDateTime0);
      distanciaAltimetria0.setIteracoes(5781);
      distanciaAltimetria0.getIteracoes();
      assertEquals(1185.69895265, distanciaAltimetria0.getTempoGasto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.from(offsetDateTime0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      Repeticoes repeticoes0 = new Repeticoes("qz'1 rSz", tipoAtividade0, 1.2, 125, 0, localDateTime0, true);
      repeticoes0.setIteracoes((-272));
      repeticoes0.getIteracoes();
      assertEquals(1.2, repeticoes0.getTempoGasto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      repeticoesPeso0.getDataHora();
      assertEquals(0.0, repeticoesPeso0.getTempoGasto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA;
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      Distancia distancia0 = new Distancia("zW:CZ", tipoAtividade0, 1186.58948, 569, 0.0, localDateTime0, false);
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("zW:CZ", "N?DgYt )y=g!FawQBTs", "N?DgYt )y=g!FawQBTs", 1186.58948, tipoUtilizador0);
      distancia0.calcularCalorias(utilizador0);
      assertEquals(1186.58948, distancia0.getTempoGasto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Repeticoes repeticoes0 = new Repeticoes("", tipoAtividade0, 0.0, 39, 39, localDateTime0, false);
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("", "", "", 0.0, tipoUtilizador0);
      repeticoes0.calcularCalorias(utilizador0);
      assertEquals(0.0, repeticoes0.getTempoGasto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      DistanciaAltimetria distanciaAltimetria0 = new DistanciaAltimetria("s>", tipoAtividade0, (-730.79629), 5, (-2046.312), 0.0, localDateTime0);
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("", "", "s>", 0.0, tipoUtilizador0);
      distanciaAltimetria0.calcularCalorias(utilizador0);
      assertEquals((-730.79629), distanciaAltimetria0.getTempoGasto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      DistanciaAltimetria distanciaAltimetria0 = new DistanciaAltimetria("qz'1[r rSz", tipoAtividade0, 1091.0503305155296, 98, 1091.0503305155296, 1091.0503305155296, localDateTime0);
      distanciaAltimetria0.getDataHora();
      assertEquals(1091.0503305155296, distanciaAltimetria0.getTempoGasto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Repeticoes repeticoes0 = new Repeticoes("[5ojQ~Z69Z+{J9O&", tipoAtividade0, 890.886701364863, 0, 0, localDateTime0, true);
      String string0 = repeticoes0.toString();
      assertEquals("{Nome=[5ojQ~Z69Z+{J9O&, tipo='REPETICOES', Tempo Gasto='890.886701364863', iteracoes=0, data=2014-02-14T20:21:21.320}", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        repeticoesPeso0.calcularCalorias(utilizador0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.utilizador.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Distancia distancia0 = new Distancia("[5ojQ~Z69Z+{J9O&", tipoAtividade0, 890.886701364863, 0, 0, 0, localDateTime0);
      distancia0.getTipo();
      assertEquals(890.886701364863, distancia0.getTempoGasto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES_COM_PESOS;
      DistanciaAltimetria distanciaAltimetria0 = new DistanciaAltimetria("+", tipoAtividade0, 956.8, 1, 956.8, 738.9725730029638, (LocalDateTime) null);
      distanciaAltimetria0.setTempoGasto(0.0);
      assertEquals(0.0, distanciaAltimetria0.getTempoGasto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES_COM_PESOS;
      DistanciaAltimetria distanciaAltimetria0 = new DistanciaAltimetria("+", tipoAtividade0, 956.8, 1, 956.8, 738.9725730029638, (LocalDateTime) null);
      distanciaAltimetria0.setTipo(tipoAtividade0);
      assertEquals(956.8, distanciaAltimetria0.getTempoGasto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Distancia distancia0 = new Distancia("[5ojQ~Z69Z+{J9O&", tipoAtividade0, 890.886701364863, 0, 0, 0, localDateTime0);
      distancia0.setDataHora(localDateTime0);
      assertEquals(890.886701364863, distancia0.getTempoGasto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Distancia distancia0 = new Distancia("[5ojQ~Z69Z+{J9O&", tipoAtividade0, 890.886701364863, 0, 0, 0, localDateTime0);
      double double0 = distancia0.getTempoGasto();
      assertEquals(890.886701364863, double0, 0.01);
  }
}
