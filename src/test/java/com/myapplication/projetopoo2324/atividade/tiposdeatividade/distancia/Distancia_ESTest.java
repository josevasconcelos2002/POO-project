/*
 * This file was automatically generated by EvoSuite
 * Thu May 02 15:26:10 GMT 2024
 */

package com.myapplication.projetopoo2324.atividade.tiposdeatividade.distancia;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.myapplication.projetopoo2324.atividade.Atividade;
import com.myapplication.projetopoo2324.atividade.TipoAtividade;
import com.myapplication.projetopoo2324.atividade.tiposdeatividade.distancia.Distancia;
import com.myapplication.projetopoo2324.planodetreino.PlanoDeTreino;
import com.myapplication.projetopoo2324.utilizador.TipoUtilizador;
import com.myapplication.projetopoo2324.utilizador.Utilizador;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Distancia_ESTest extends Distancia_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES_COM_PESOS;
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      Distancia distancia0 = new Distancia("", tipoAtividade0, 0.0, 1, 1, localDateTime0, true);
      assertTrue(distancia0.getEHard());
      
      distancia0.setEHard(false);
      assertFalse(distancia0.getEHard());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA;
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Distancia distancia0 = new Distancia("=:", tipoAtividade0, (-3436.2372461222058), 0, (-4786.18882), 0, localDateTime0);
      distancia0.setNome("=:");
      distancia0.getNome();
      assertEquals((-4786.18882), distancia0.getDistanciaEmKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES;
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Distancia distancia0 = new Distancia("", tipoAtividade0, 0.5, (-2560), (-538.126), 0.5, localDateTime0);
      distancia0.setNome("");
      distancia0.getNome();
      assertEquals((-538.126), distancia0.getDistanciaEmKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES;
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Distancia distancia0 = new Distancia("", tipoAtividade0, 0.5, (-2560), (-538.126), 0.5, localDateTime0);
      distancia0.setIteracoes((-2560));
      int int0 = distancia0.getIteracoes();
      assertEquals((-2560), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Distancia distancia0 = new Distancia("{5-eX_6zW+38dC-", tipoAtividade0, (-1154.69277), (-1255), (-1255), (-1154.69277), localDateTime0);
      distancia0.getEHard();
      assertEquals((-1255.0), distancia0.getDistanciaEmKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Distancia distancia0 = new Distancia((String) null, tipoAtividade0, 0.0, 0, (-2225.1008479107304), localDateTime0, false);
      assertEquals((-2225.1008479107304), distancia0.getDistanciaEmKm(), 0.01);
      
      distancia0.setDistanciaEmKm(0);
      double double0 = distancia0.getDistanciaEmKm();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES;
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Distancia distancia0 = new Distancia("", tipoAtividade0, 0.5, (-2560), (-538.126), 0.5, localDateTime0);
      double double0 = distancia0.getDistanciaEmKm();
      assertEquals((-538.126), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Distancia distancia0 = new Distancia("", tipoAtividade0, 1.2, 1724, 0.0, (-2005.623683460709), localDateTime0);
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("", "", "", (-2005.623683460709), tipoUtilizador0);
      double double0 = distancia0.calcularCalorias(utilizador0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES_COM_PESOS;
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      Distancia distancia0 = new Distancia("", tipoAtividade0, 0.0, 1, 1, localDateTime0, true);
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      LinkedList<PlanoDeTreino> linkedList0 = new LinkedList<PlanoDeTreino>();
      LinkedList<Atividade> linkedList1 = new LinkedList<Atividade>();
      Utilizador utilizador0 = new Utilizador("X]Bt=hVy3G\"", "?t", "(", 0, tipoUtilizador0, linkedList0, linkedList1);
      double double0 = distancia0.calcularCalorias(utilizador0);
      assertTrue(distancia0.getEHard());
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Distancia distancia0 = new Distancia((String) null, tipoAtividade0, 0.0, 0, (-2225.1008479107304), localDateTime0, false);
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador((String) null, "com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoespeso.RepeticoesPeso", "'zn", 0, tipoUtilizador0);
      double double0 = distancia0.calcularCalorias(utilizador0);
      assertEquals((-1335.0605087464382), double0, 0.01);
      assertFalse(distancia0.getEHard());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      Distancia distancia0 = new Distancia("", tipoAtividade0, 0.0, 0, (-2374.071629992), 0, (LocalDateTime) null);
      distancia0.getNome();
      assertEquals((-2374.071629992), distancia0.getDistanciaEmKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA;
      Distancia distancia0 = new Distancia("`", tipoAtividade0, 0.5, (-1), (-1), (LocalDateTime) null, true);
      boolean boolean0 = distancia0.getEHard();
      assertEquals((-1.0), distancia0.getDistanciaEmKm(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES_COM_PESOS;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Distancia distancia0 = new Distancia((String) null, tipoAtividade0, (-1.0), 3, 2576.0, localDateTime0, false);
      distancia0.setIteracoes(3181);
      int int0 = distancia0.getIteracoes();
      assertEquals(3181, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES_COM_PESOS;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Distancia distancia0 = new Distancia((String) null, tipoAtividade0, (-1.0), 3, 2576.0, localDateTime0, false);
      int int0 = distancia0.getIteracoes();
      assertFalse(distancia0.getEHard());
      assertEquals(0, int0);
      assertEquals(2576.0, distancia0.getDistanciaEmKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES_COM_PESOS;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Distancia distancia0 = new Distancia((String) null, tipoAtividade0, (-1.0), 3, 2576.0, localDateTime0, false);
      // Undeclared exception!
      try { 
        distancia0.calcularCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.atividade.tiposdeatividade.distancia.Distancia", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES_COM_PESOS;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Distancia distancia0 = new Distancia((String) null, tipoAtividade0, (-1.0), 3, 2576.0, localDateTime0, false);
      double double0 = distancia0.getDistanciaEmKm();
      assertFalse(distancia0.getEHard());
      assertEquals(2576.0, double0, 0.01);
  }
}
