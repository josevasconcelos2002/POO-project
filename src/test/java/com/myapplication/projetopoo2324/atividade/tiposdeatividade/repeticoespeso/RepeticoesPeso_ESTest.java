/*
 * This file was automatically generated by EvoSuite
 * Thu May 02 15:24:12 GMT 2024
 */

package com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoespeso;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.myapplication.projetopoo2324.atividade.Atividade;
import com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoespeso.RepeticoesPeso;
import com.myapplication.projetopoo2324.planodetreino.PlanoDeTreino;
import com.myapplication.projetopoo2324.utilizador.TipoUtilizador;
import com.myapplication.projetopoo2324.utilizador.Utilizador;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RepeticoesPeso_ESTest extends RepeticoesPeso_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      repeticoesPeso0.setPeso(0.1);
      double double0 = repeticoesPeso0.getPeso();
      assertEquals(0.1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      repeticoesPeso0.setPeso((-1));
      double double0 = repeticoesPeso0.getPeso();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      repeticoesPeso0.setNome("m");
      String string0 = repeticoesPeso0.getNome();
      assertEquals("m", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      repeticoesPeso0.setNome("");
      String string0 = repeticoesPeso0.getNome();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      repeticoesPeso0.setIteracoes(5);
      int int0 = repeticoesPeso0.getIteracoes();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      repeticoesPeso0.setIteracoes((-1085));
      int int0 = repeticoesPeso0.getIteracoes();
      assertEquals((-1085), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      repeticoesPeso0.setPeso(3082.652251675247);
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("5q'", "5q'", "5q'", 0.2, tipoUtilizador0);
      double double0 = repeticoesPeso0.calcularCalorias(utilizador0);
      assertEquals(3082.652251675247, repeticoesPeso0.getPeso(), 0.01);
      assertEquals(61.653045033504945, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      repeticoesPeso0.setPeso((-1256.1844));
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador(".FY?g}Sc!>pe.o", "", "", 0.0, tipoUtilizador0);
      double double0 = repeticoesPeso0.calcularCalorias(utilizador0);
      assertEquals((-1256.1844), repeticoesPeso0.getPeso(), 0.01);
      assertEquals((-36.17811072), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        repeticoesPeso0.calcularCalorias(utilizador0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.utilizador.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      double double0 = repeticoesPeso0.getPeso();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      int int0 = repeticoesPeso0.getRepeticoes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      int int0 = repeticoesPeso0.getIteracoes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      String string0 = repeticoesPeso0.getNome();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RepeticoesPeso repeticoesPeso0 = new RepeticoesPeso();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      LinkedList<PlanoDeTreino> linkedList0 = new LinkedList<PlanoDeTreino>();
      LinkedList<Atividade> linkedList1 = new LinkedList<Atividade>();
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, 0, tipoUtilizador0, linkedList0, linkedList1);
      double double0 = repeticoesPeso0.calcularCalorias(utilizador0);
      assertEquals(0.0, repeticoesPeso0.getPeso(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }
}
