/*
 * This file was automatically generated by EvoSuite
 * Thu May 02 15:25:52 GMT 2024
 */

package com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.myapplication.projetopoo2324.atividade.TipoAtividade;
import com.myapplication.projetopoo2324.atividade.tiposdeatividade.repeticoes.Repeticoes;
import com.myapplication.projetopoo2324.utilizador.TipoUtilizador;
import com.myapplication.projetopoo2324.utilizador.Utilizador;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Repeticoes_ESTest extends Repeticoes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1289);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      Repeticoes repeticoes0 = new Repeticoes("", tipoAtividade0, (-318.9221211534), 0, 0, localDateTime0, true);
      int int0 = repeticoes0.getRepeticoes();
      assertEquals(0, int0);
      assertTrue(repeticoes0.getEHard());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      Repeticoes repeticoes0 = new Repeticoes("", tipoAtividade0, 60.0, (-3104), (-1), localDateTime0, false);
      int int0 = repeticoes0.getRepeticoes();
      assertEquals((-1), int0);
      assertFalse(repeticoes0.getEHard());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      Repeticoes repeticoes0 = new Repeticoes("", tipoAtividade0, 0.2, (-3726), 828, (LocalDateTime) null, false);
      repeticoes0.setNome("w~rDOU\">a``C9y");
      repeticoes0.getNome();
      assertEquals(828, repeticoes0.getRepeticoes());
      assertFalse(repeticoes0.getEHard());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      Repeticoes repeticoes0 = new Repeticoes(",qYud Hn1nL-", tipoAtividade0, 1.0, 226, 226, (LocalDateTime) null, true);
      repeticoes0.setNome("");
      repeticoes0.getNome();
      assertEquals(226, repeticoes0.getRepeticoes());
      assertTrue(repeticoes0.getEHard());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      Instant instant0 = MockInstant.ofEpochMilli((-1549L));
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      Repeticoes repeticoes0 = new Repeticoes(", tipo='", tipoAtividade0, 0.0, 945, 226, localDateTime0, true);
      repeticoes0.setIteracoes(1026);
      int int0 = repeticoes0.getIteracoes();
      assertEquals(1026, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      Repeticoes repeticoes0 = new Repeticoes("", tipoAtividade0, 0.2, (-3726), 828, (LocalDateTime) null, false);
      repeticoes0.setIteracoes((-5053));
      int int0 = repeticoes0.getIteracoes();
      assertEquals((-5053), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      Repeticoes repeticoes0 = new Repeticoes("", tipoAtividade0, 0.2, (-3726), 828, (LocalDateTime) null, false);
      boolean boolean0 = repeticoes0.getEHard();
      assertEquals(828, repeticoes0.getRepeticoes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      Repeticoes repeticoes0 = new Repeticoes("", tipoAtividade0, 0.2, (-3726), 828, (LocalDateTime) null, false);
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("", "w~rDOU\">a``C9y", "", (-3726), tipoUtilizador0);
      double double0 = repeticoes0.calcularCalorias(utilizador0);
      assertEquals(198.72, double0, 0.01);
      assertFalse(repeticoes0.getEHard());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Repeticoes repeticoes0 = new Repeticoes("*Z9BS.81m+assvS%", tipoAtividade0, 0.0, (-985), 1, localDateTime0, true);
      assertEquals(1, repeticoes0.getRepeticoes());
      
      repeticoes0.setRepeticoes((-985));
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("*Z9BS.81m+assvS%", "74mOX{%R.r", "74mOX{%R.r", (-1.0), tipoUtilizador0);
      double double0 = repeticoes0.calcularCalorias(utilizador0);
      assertEquals((-157.60000000000002), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA;
      Month month0 = Month.OCTOBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(3, month0, 3, 3, 3);
      Repeticoes repeticoes0 = new Repeticoes(", nome='", tipoAtividade0, 0.0, 3, 3, localDateTime0, true);
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        repeticoes0.calcularCalorias(utilizador0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.utilizador.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      Repeticoes repeticoes0 = new Repeticoes("", tipoAtividade0, 0.2, (-3726), 828, (LocalDateTime) null, false);
      int int0 = repeticoes0.getRepeticoes();
      assertEquals(828, int0);
      assertFalse(repeticoes0.getEHard());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES;
      Period period0 = Period.ofWeeks(0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Repeticoes repeticoes0 = new Repeticoes("/N@KjFMWE9#PQEflG{", tipoAtividade0, 397.9729018, 0, 0, localDateTime0, true);
      assertTrue(repeticoes0.getEHard());
      
      repeticoes0.setEHard(false);
      assertFalse(repeticoes0.getEHard());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES;
      Period period0 = Period.ofWeeks(0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Repeticoes repeticoes0 = new Repeticoes("/N@KjFMWE9#PQEflG{", tipoAtividade0, 397.9729018, 0, 0, localDateTime0, true);
      int int0 = repeticoes0.getIteracoes();
      assertEquals(0, int0);
      assertTrue(repeticoes0.getEHard());
      assertEquals(0, repeticoes0.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES;
      Period period0 = Period.ofWeeks(0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Repeticoes repeticoes0 = new Repeticoes("/N@KjFMWE9#PQEflG{", tipoAtividade0, 397.9729018, 0, 0, localDateTime0, true);
      repeticoes0.getNome();
      assertTrue(repeticoes0.getEHard());
      assertEquals(0, repeticoes0.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES;
      Period period0 = Period.ofWeeks(0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Repeticoes repeticoes0 = new Repeticoes("/N@KjFMWE9#PQEflG{", tipoAtividade0, 397.9729018, 0, 0, localDateTime0, true);
      boolean boolean0 = repeticoes0.getEHard();
      assertTrue(boolean0);
      assertEquals(0, repeticoes0.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TipoAtividade tipoAtividade0 = TipoAtividade.REPETICOES;
      Period period0 = Period.ofWeeks(0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Repeticoes repeticoes0 = new Repeticoes("/N@KjFMWE9#PQEflG{", tipoAtividade0, 397.9729018, 0, 0, localDateTime0, true);
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("|iwlmm=>5) \"M_", "|iwlmm=>5) \"M_", "/N@KjFMWE9#PQEflG{", 296.264455, tipoUtilizador0);
      double double0 = repeticoes0.calcularCalorias(utilizador0);
      assertTrue(repeticoes0.getEHard());
      assertEquals(0.0, double0, 0.01);
  }
}
