/*
 * This file was automatically generated by EvoSuite
 * Thu May 02 15:13:34 GMT 2024
 */

package com.myapplication.projetopoo2324.estatisticas;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.myapplication.projetopoo2324.atividade.Atividade;
import com.myapplication.projetopoo2324.atividade.TipoAtividade;
import com.myapplication.projetopoo2324.atividade.tiposdeatividade.distancia.Distancia;
import com.myapplication.projetopoo2324.estatisticas.VerEstatisticas;
import com.myapplication.projetopoo2324.planodetreino.PlanoDeTreino;
import com.myapplication.projetopoo2324.planodetreino.diadasemana.DiaDaSemana;
import com.myapplication.projetopoo2324.planodetreino.recorrencia.Recorrencia;
import com.myapplication.projetopoo2324.utilizador.TipoUtilizador;
import com.myapplication.projetopoo2324.utilizador.Utilizador;
import com.myapplication.projetopoo2324.utilizador.Utilizadores;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneOffset;
import java.util.EnumSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VerEstatisticas_ESTest extends VerEstatisticas_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("vIW9I,aG|A", "e@)``lk", "e@)``lk", 2075, tipoUtilizador0);
      utilizadores0.addUtilizador(utilizador0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2183L));
      Utilizador utilizador1 = verEstatisticas0.encontrarUtilizadorComMaisAtividades(utilizadores0, (LocalDate) null, localDate0);
      assertEquals(2075.0, utilizador1.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2075);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 2075, zoneOffset0);
      Utilizadores utilizadores0 = new Utilizadores();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("vIW9I,aG|A", "e@)``lk", "e@)``lk", 2075, tipoUtilizador0);
      utilizadores0.addUtilizador(utilizador0);
      Utilizador utilizador1 = VerEstatisticas.encontrarUtilizadorComMaisCalorias(utilizadores0, localDateTime0, (LocalDateTime) null);
      assertNull(utilizador1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("K|YE0;`Pgb\";E", "K|YE0;`Pgb\";E", "K|YE0;`Pgb\";E", 0.0, tipoUtilizador0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDate localDate0 = MockLocalDate.now();
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, "K|YE0;`Pgb\";E", recorrencia0, (EnumSet<DiaDaSemana>) null);
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA;
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Distancia distancia0 = new Distancia("K|YE0;`Pgb\";E", tipoAtividade0, 0.8, (-3274), (-518.1554987438), 0.0, localDateTime0);
      planoDeTreino0.adicionarAtividade(distancia0, recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.adicionarPlanoDeTreino(planoDeTreino0);
      utilizadores0.addUtilizador(utilizador0);
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      TipoAtividade tipoAtividade1 = verEstatisticas0.encontrarTipoAtividadeMaisRealizada(utilizadores0);
      assertEquals(TipoAtividade.DISTANCIA, tipoAtividade1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      Utilizador utilizador0 = new Utilizador();
      List<Atividade> list0 = verEstatisticas0.listarAtividadesIsoladas(utilizador0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2075);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 2075, zoneOffset0);
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("vIW9I,aG|A", "e@)``lk", "e@)``lk", 2075, tipoUtilizador0);
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA;
      Distancia distancia0 = new Distancia("", tipoAtividade0, 0.0, 1, 2075, localDateTime0, false);
      utilizador0.registrarAtividadeIsolada(distancia0);
      List<Atividade> list0 = verEstatisticas0.listarAtividadesIsoladas(utilizador0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("tq[D3t;-!-R", "com.myapplication.projetopoo2324.estatisticas.VerEstatisticas", "com.myapplication.projetopoo2324.estatisticas.VerEstatisticas", 0.0, tipoUtilizador0);
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA_ALTIMETRIA;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Distancia distancia0 = new Distancia((String) null, tipoAtividade0, (-823.40363), (-373), (-1423.63051684252), localDateTime0, false);
      utilizador0.registrarAtividadeIsolada(distancia0);
      List<Atividade> list0 = verEstatisticas0.listarAtividades(utilizador0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      Utilizadores utilizadores0 = new Utilizadores();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("tq[D3t;-!-R", "com.myapplication.projetopoo2324.estatisticas.VerEstatisticas", "com.myapplication.projetopoo2324.estatisticas.VerEstatisticas", 0.0, tipoUtilizador0);
      List<PlanoDeTreino> list0 = utilizador0.getPlanosDeTreino();
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      Utilizador utilizador1 = new Utilizador("", (String) null, "tq[D3t;-!-R", (-0.539914145113799), tipoUtilizador0, list0, linkedList0);
      utilizadores0.addUtilizador(utilizador1);
      Utilizador utilizador2 = verEstatisticas0.encontrarUtilizadorComMaisAtividadesDesdeSempre(utilizadores0);
      assertTrue(utilizador2.equals((Object)utilizador1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("tq[D3t;-!-R", "com.myapplication.projetopo2324.estatisticas.VerEstatisticas", "com.myapplication.projetopo2324.estatisticas.VerEstatisticas", 0.0, tipoUtilizador0);
      List<PlanoDeTreino> list0 = utilizador0.getPlanosDeTreino();
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      List<Atividade> list1 = verEstatisticas0.listarAtividades(utilizador0);
      Utilizador utilizador1 = new Utilizador("", (String) null, "tq[D3t;-!-R", (-0.6935137996362043), tipoUtilizador0, list0, list1);
      utilizadores0.addUtilizador(utilizador1);
      Utilizador utilizador2 = verEstatisticas0.encontrarUtilizadorComMaisAtividades(utilizadores0, (LocalDate) null, (LocalDate) null);
      assertNotSame(utilizador2, utilizador0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("4a)amC]@.s.tocZ", (String) null, (String) null, 0.0, tipoUtilizador0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDate localDate0 = MockLocalDate.now();
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, (String) null, recorrencia0, (EnumSet<DiaDaSemana>) null);
      planoDeTreino0.adicionarAtividade((Atividade) null, recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.adicionarPlanoDeTreino(planoDeTreino0);
      int int0 = verEstatisticas0.calcularTotalAtividadesRealizadasDesdeSempre(utilizador0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      // Undeclared exception!
      try { 
        verEstatisticas0.listarAtividades((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.estatisticas.VerEstatisticas", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        VerEstatisticas.encontrarUtilizadorComMaisCaloriasDesdeSempre((Utilizadores) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.estatisticas.VerEstatisticas", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        VerEstatisticas.encontrarUtilizadorComMaisCalorias((Utilizadores) null, (LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.estatisticas.VerEstatisticas", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      // Undeclared exception!
      try { 
        verEstatisticas0.encontrarUtilizadorComMaisAtividadesDesdeSempre((Utilizadores) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.estatisticas.VerEstatisticas", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("K|YE0;`Pgb\";E", "K|YE0;`Pgb\";E", "K|YE0;`Pgb\";E", 0.0, tipoUtilizador0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDate localDate0 = MockLocalDate.now();
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, "K|YE0;`Pgb\";E", recorrencia0, (EnumSet<DiaDaSemana>) null);
      planoDeTreino0.adicionarAtividade((Atividade) null, recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.adicionarPlanoDeTreino(planoDeTreino0);
      utilizadores0.addUtilizador(utilizador0);
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      // Undeclared exception!
      try { 
        verEstatisticas0.encontrarUtilizadorComMaisAtividades(utilizadores0, localDate0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.estatisticas.VerEstatisticas", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("K|YE0;`Pgb\";E", "K|YE0;`Pgb\";E", "K|YE0;`Pgb\";E", 0.0, tipoUtilizador0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDate localDate0 = MockLocalDate.now();
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, "K|YE0;`Pgb\";E", recorrencia0, (EnumSet<DiaDaSemana>) null);
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      planoDeTreino0.adicionarAtividade((Atividade) null, recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.adicionarPlanoDeTreino(planoDeTreino0);
      utilizadores0.addUtilizador(utilizador0);
      // Undeclared exception!
      try { 
        VerEstatisticas.calcularTotalCaloriasDispendidas(utilizadores0, localDateTime0, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.estatisticas.VerEstatisticas", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        VerEstatisticas.calcularTotalAltimetriaDesdeSempre((Utilizadores) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.estatisticas.VerEstatisticas", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2075);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 2075, zoneOffset0);
      // Undeclared exception!
      try { 
        VerEstatisticas.calcularTotalAltimetria(localDateTime0, localDateTime0, (Utilizadores) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.estatisticas.VerEstatisticas", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      Utilizador utilizador0 = new Utilizador();
      int int0 = verEstatisticas0.calcularTotalAtividadesRealizadasDesdeSempre(utilizador0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PROFISSIONAL;
      Utilizador utilizador0 = new Utilizador("", "", ",`{.I0", 0.8, tipoUtilizador0);
      utilizador0.adicionarPlanoDeTreino((PlanoDeTreino) null);
      // Undeclared exception!
      try { 
        verEstatisticas0.calcularTotalAtividadesRealizadasDesdeSempre(utilizador0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.estatisticas.VerEstatisticas", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("K|YE0;`Pgb\";E", (String) null, (String) null, 0.0, tipoUtilizador0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDate localDate0 = MockLocalDate.now();
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, (String) null, recorrencia0, (EnumSet<DiaDaSemana>) null);
      planoDeTreino0.adicionarAtividade((Atividade) null, recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.adicionarPlanoDeTreino(planoDeTreino0);
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      // Undeclared exception!
      try { 
        verEstatisticas0.calcularTotalAtividadesRealizadas(utilizador0, localDate0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.estatisticas.VerEstatisticas", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("K|YE0;`Pgb\";E", (String) null, (String) null, 0.0, tipoUtilizador0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDate localDate0 = MockLocalDate.now();
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, (String) null, recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.adicionarPlanoDeTreino(planoDeTreino0);
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      int int0 = verEstatisticas0.calcularTotalAtividadesRealizadas(utilizador0, localDate0, localDate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("4a)amC]@.s.tocZ", (String) null, (String) null, 0.0, tipoUtilizador0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDate localDate0 = MockLocalDate.now();
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, (String) null, recorrencia0, (EnumSet<DiaDaSemana>) null);
      planoDeTreino0.adicionarAtividade((Atividade) null, recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.adicionarPlanoDeTreino(planoDeTreino0);
      utilizadores0.addUtilizador(utilizador0);
      // Undeclared exception!
      try { 
        VerEstatisticas.calcularTotalCaloriasDispendidasDesdeSempre(utilizadores0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.estatisticas.VerEstatisticas", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("K|YE0;`Pgb\";E", "K|YE0;`Pgb\";E", "K|YE0;`Pgb\";E", 0.0, tipoUtilizador0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDate localDate0 = MockLocalDate.now();
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, "K|YE0;`Pgb\";E", recorrencia0, (EnumSet<DiaDaSemana>) null);
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA;
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Distancia distancia0 = new Distancia("K|YE0;`Pgb\";E", tipoAtividade0, 0.8, (-3274), (-518.1554987438), 0.0, localDateTime0);
      planoDeTreino0.adicionarAtividade(distancia0, recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.adicionarPlanoDeTreino(planoDeTreino0);
      utilizadores0.addUtilizador(utilizador0);
      double double0 = VerEstatisticas.calcularTotalCaloriasDispendidas(utilizadores0, localDateTime0, localDateTime0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.AMADOR;
      Utilizador utilizador0 = new Utilizador("4a)mC]@..tocZ", (String) null, (String) null, 0.0, tipoUtilizador0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDate localDate0 = MockLocalDate.now();
      Recorrencia recorrencia0 = Recorrencia.UNICA_VEZ;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, (String) null, recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.adicionarPlanoDeTreino(planoDeTreino0);
      List<Atividade> list0 = verEstatisticas0.listarAtividades(utilizador0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("K|YE0;`Pgb\";E", "K|YE0;`Pgb\";E", "K|YE0;`Pgb\";E", 0.0, tipoUtilizador0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDate localDate0 = MockLocalDate.now();
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, "K|YE0;`Pgb\";E", recorrencia0, (EnumSet<DiaDaSemana>) null);
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA;
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Distancia distancia0 = new Distancia("K|YE0;`Pgb\";E", tipoAtividade0, 0.8, (-3274), (-518.1554987438), 0.0, localDateTime0);
      planoDeTreino0.adicionarAtividade(distancia0, recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.adicionarPlanoDeTreino(planoDeTreino0);
      utilizadores0.addUtilizador(utilizador0);
      double double0 = VerEstatisticas.calcularTotalAltimetriaDesdeSempre(utilizadores0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("4a)amC]@.s.tocZ", "4a)amC]@.s.tocZ", "4a)amC]@.s.tocZ", 0.0, tipoUtilizador0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDate localDate0 = MockLocalDate.now();
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, "4a)amC]@.s.tocZ", recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.adicionarPlanoDeTreino(planoDeTreino0);
      utilizadores0.addUtilizador(utilizador0);
      double double0 = VerEstatisticas.calcularTotalAltimetria((LocalDateTime) null, (LocalDateTime) null, utilizadores0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      Utilizadores utilizadores0 = new Utilizadores();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("4a)amC]@.s.tocZ", (String) null, (String) null, 0.0, tipoUtilizador0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDate localDate0 = MockLocalDate.now();
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, (String) null, recorrencia0, (EnumSet<DiaDaSemana>) null);
      planoDeTreino0.adicionarAtividade((Atividade) null, recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.adicionarPlanoDeTreino(planoDeTreino0);
      utilizadores0.addUtilizador(utilizador0);
      // Undeclared exception!
      try { 
        verEstatisticas0.encontrarTipoAtividadeMaisRealizada(utilizadores0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.estatisticas.VerEstatisticas", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      Utilizadores utilizadores0 = new Utilizadores();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("4a)amC]@.s.tocZ", "4a)amC]@.s.tocZ", "4a)amC]@.s.tocZ", 0.0, tipoUtilizador0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDate localDate0 = MockLocalDate.now();
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, "4a)amC]@.s.tocZ", recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.adicionarPlanoDeTreino(planoDeTreino0);
      utilizadores0.addUtilizador(utilizador0);
      verEstatisticas0.encontrarTipoAtividadeMaisRealizada(utilizadores0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      Utilizadores utilizadores0 = new Utilizadores();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("4a)amC]@.s.tocZ", "4a)amC]@.s.tocZ", "4a)amC]@.s.tocZ", 0.0, tipoUtilizador0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDate localDate0 = MockLocalDate.now();
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, "4a)amC]@.s.tocZ", recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.adicionarPlanoDeTreino(planoDeTreino0);
      utilizadores0.addUtilizador(utilizador0);
      Utilizador utilizador1 = verEstatisticas0.encontrarUtilizadorComMaisAtividadesDesdeSempre(utilizadores0);
      assertEquals("4a)amC]@.s.tocZ", utilizador1.getEmail());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      Utilizadores utilizadores0 = new Utilizadores();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("4a)amC]@.s.tocZ", "4a)amC]@.s.tocZ", "4a)amC]@.s.tocZ", 0.0, tipoUtilizador0);
      List<PlanoDeTreino> list0 = utilizador0.getPlanosDeTreino();
      Utilizador utilizador1 = new Utilizador();
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      Utilizador utilizador2 = new Utilizador("4a)amC]@.s.tocZ", "4a)amC]@.s.tocZ", "4a)amC]@.s.tocZ", 0.0, tipoUtilizador0, list0, linkedList0);
      utilizadores0.addUtilizador(utilizador2);
      utilizadores0.addUtilizador(utilizador1);
      Utilizador utilizador3 = verEstatisticas0.encontrarUtilizadorComMaisAtividadesDesdeSempre(utilizadores0);
      assertNotNull(utilizador3);
      assertEquals("", utilizador3.getNome());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      Utilizadores utilizadores0 = new Utilizadores();
      Utilizador utilizador0 = verEstatisticas0.encontrarUtilizadorComMaisAtividadesDesdeSempre(utilizadores0);
      assertNull(utilizador0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("K|YE0;`Pgb\";E", "K|YE0;`Pgb\";E", "K|YE0;`Pgb\";E", 0.0, tipoUtilizador0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDate localDate0 = MockLocalDate.now();
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, "K|YE0;`Pgb\";E", recorrencia0, (EnumSet<DiaDaSemana>) null);
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA;
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Distancia distancia0 = new Distancia("K|YE0;`Pgb\";E", tipoAtividade0, 0.8, (-3274), (-518.1554987438), 0.0, localDateTime0);
      planoDeTreino0.adicionarAtividade(distancia0, recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.adicionarPlanoDeTreino(planoDeTreino0);
      utilizadores0.addUtilizador(utilizador0);
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      Utilizador utilizador1 = verEstatisticas0.encontrarUtilizadorComMaisAtividades(utilizadores0, localDate0, localDate0);
      assertEquals("K|YE0;`Pgb\";E", utilizador1.getMorada());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      Utilizadores utilizadores0 = new Utilizadores();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("4a)amC]@.s.tocZ", "4a)amC]@.s.tocZ", "4a)amC]@.s.tocZ", 0.0, tipoUtilizador0);
      List<PlanoDeTreino> list0 = utilizador0.getPlanosDeTreino();
      Utilizador utilizador1 = new Utilizador();
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      Utilizador utilizador2 = new Utilizador("4a)amC]@.s.tocZ", "4a)amC]@.s.tocZ", "4a)amC]@.s.tocZ", 0.0, tipoUtilizador0, list0, linkedList0);
      LocalDate localDate0 = MockLocalDate.now();
      utilizadores0.addUtilizador(utilizador2);
      utilizadores0.addUtilizador(utilizador1);
      Utilizador utilizador3 = verEstatisticas0.encontrarUtilizadorComMaisAtividades(utilizadores0, localDate0, localDate0);
      assertNotNull(utilizador3);
      assertEquals(60.0, utilizador3.getFCM(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      Utilizadores utilizadores0 = new Utilizadores();
      LocalDate localDate0 = MockLocalDate.now();
      Utilizador utilizador0 = verEstatisticas0.encontrarUtilizadorComMaisAtividades(utilizadores0, localDate0, localDate0);
      assertNull(utilizador0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("K|YE0;`Pgb\";E", "K|YE0;`Pgb\";E", "K|YE0;`Pgb\";E", 0.0, tipoUtilizador0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDate localDate0 = MockLocalDate.now();
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, "K|YE0;`Pgb\";E", recorrencia0, (EnumSet<DiaDaSemana>) null);
      TipoAtividade tipoAtividade0 = TipoAtividade.DISTANCIA;
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Distancia distancia0 = new Distancia("K|YE0;`Pgb\";E", tipoAtividade0, 0.8, (-3274), (-518.1554987438), 0.0, localDateTime0);
      planoDeTreino0.adicionarAtividade(distancia0, recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.adicionarPlanoDeTreino(planoDeTreino0);
      utilizadores0.addUtilizador(utilizador0);
      Utilizador utilizador1 = VerEstatisticas.encontrarUtilizadorComMaisCaloriasDesdeSempre(utilizadores0);
      assertNull(utilizador1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      TipoUtilizador tipoUtilizador0 = TipoUtilizador.PRATICANTE_OCASIONAL;
      Utilizador utilizador0 = new Utilizador("4a)amC]@.s.tocZ", "4a)amC]@.s.tocZ", "4a)amC]@.s.tocZ", 0.0, tipoUtilizador0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      LocalDate localDate0 = MockLocalDate.now();
      Recorrencia recorrencia0 = Recorrencia.SEMANAL;
      PlanoDeTreino planoDeTreino0 = new PlanoDeTreino(localDate0, linkedList0, "4a)amC]@.s.tocZ", recorrencia0, (EnumSet<DiaDaSemana>) null);
      utilizador0.adicionarPlanoDeTreino(planoDeTreino0);
      utilizadores0.addUtilizador(utilizador0);
      double double0 = VerEstatisticas.calcularTotalCaloriasDispendidasDesdeSempre(utilizadores0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VerEstatisticas verEstatisticas0 = new VerEstatisticas();
      // Undeclared exception!
      try { 
        verEstatisticas0.listarAtividadesIsoladas((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.myapplication.projetopoo2324.estatisticas.VerEstatisticas", e);
      }
  }
}
